/** TODO build.gradle 文件中所有的 Build script blocks 
 * allprojects { }
 * artifacts { }
 * buildscript { }
 * configurations { }
 * dependencies { }
 * repositories { }
 * sourceSets { }
 * subprojects { }
 * publishing { }
 * */


/** TODO 将所有插件定义到 root project，
 * apply false: 表示将插件添加到所有项目中，除了 root project 
 * */
plugins {
    // 基本的打包压缩操作，不能 apply false
    id 'base'      
    // java 项目编译等操作，不能 apply false
    id 'java' 
    // java 控制台 app 需要的额外操作，不能 apply false
    // id 'application'
    // 用于 java 打包成 jar 包的操作，不能 apply false
    // id 'java-library'
    // 用于 java web 项目打成 war 包，不能 apply false
    // id 'war'
    // 用于运行 java web 项目 
    id 'org.gretty' version '3.0.1' apply false
    // 作用： 引入 gradle 构建 spring boot 项目所需要的 task，且引入的 task 会根据 gradle 中引入的插件动态变化
    id 'org.springframework.boot' version '2.2.2.RELEASE' apply false
    // 作用： 让 srping boot 来管理各个依赖的版本，而不是手工指定，
    // 好处： spring boot 管理的各个版本的依赖，都是经过测试的，已经废弃，替换为 spring-boot-dependencies 或者 spring-boot-starter-parent
    id 'io.spring.dependency-management' version "1.0.8.RELEASE" apply false
    // 作用：让 Entity 类不用写 getter setter
    id "io.freefair.lombok" version "4.1.6"
    // IDEA 整合操作，不能 apply false
    id 'idea'
}

allprojects {
    repositories {
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        mavenCentral()
        jcenter()
        // 自己添加的目录作为仓库
        flatDir { dirs 'lib1', 'lib2' }
    }
}


subprojects {

    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'


    sourceCompatibility = JavaVersion.VERSION_11        // 项目中代码使用的 JDK 版本
    targetCompatibility = JavaVersion.VERSION_11         // 编译后的 .class 文件的 JDK 版本
    version = '0.0.1'
    

    configurations {

        testCompile.exclude group: 'org.junit.vintage'  // 排除掉 Junit5 兼容 Junit4 的 jar 包
    }

    configurations.all { // 同时拥有不同版本的实现类的时候的解决办法
        // 高版本优先
        resolutionStrategy.capabilitiesResolution.withCapability('org.ow2.asm:asm') {
            selectHighestVersion() 
        }
        
        // 手工指定用哪个版本
        resolutionStrategy.capabilitiesResolution.withCapability("log4j:log4j") {
            select(candidates.find { it.id instanceof ModuleComponentIdentifier && it.id.module == 'log4j-over-slf4j' } )
            because 'use slf4j in place of log4j'
        }
    
    }


    dependencies {

        /** todo Gradle 支持的依赖方式
         * compileOnly — for dependencies that are necessary to compile your production code but shouldn’t be part of the runtime classpath
         * implementation (supersedes compile) — used for compilation and runtime
         * runtimeOnly (supersedes runtime) — only used at runtime, not for compilation
         * testCompileOnly — same as compileOnly except it’s for the tests
         * testImplementation — test equivalent of implementation
         * testRuntimeOnly — test equivalent of runtimeOnly
         * */

        /** TODO Convenient Develop */
        /** 
         * spring-boot-dependencies 用于管理 jar 包版本，
         * spring-boot-starter-parent 也是继承 spring-boot-dependencies 的，只是添加了额外的东西而已
         * io.spring.platform 继承 spring-boot-starter-parent，单是已经废弃
         * */
        providedCompile group: 'org.springframework.boot', name: 'spring-boot-dependencies', version: '2.3.0.RELEASE', ext: 'pom'
        /** lombok
         * 自动生成 getter setter，而不用写在代码里，需要 IDEA 安装 lombok 插件，并修改 "Settings > Build > Compiler > Annotation Processors" 为 Enable
         * annotationProcessor 是为 gradle 引入 lombok 编译时注解处理器的依赖
         * compileOnly 是说明编译期需要 lombok 依赖， 
         * annotationProcessor 和 compileOnly 必须同时依赖 lombok，否则报错
         * */
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.10'     

        /** TODO Test */
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.5.2'
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.5.2'

        /** TODO Dependency Demo */
        // implementation project(":lib") // 依赖本地项目
        // runtimeOnly group: 'org.hibernate', name: 'hibernate', version: '3.0.5', transitive: true  // transitive: 传递的，gradle 中用于表示传递性依赖
        // implementation fileTree('tools') { include '*.exe' } // 依赖指定目录下的 jar 包

        /** TODO Resolve Demo of Dependency Conflict */

        implementation('org.slf4j:slf4j-api') {  // 放在依赖里面处理冲突
            version {
                strictly '[1.7, 1.8['
                prefer '1.7.25'
            }
        }
        constraints {  // 放在约束里面处理冲突
            implementation('org.springframework:spring-core') {
                version {
                    // strictly '4.2.9.RELEASE'
                    // prefer '4.2.9.RELEASE'
                    // require '4.2.9.RELEASE'
                    // reject '4.3.16.RELEASE'
                }
            }
        }


    }
    
 
    sourceSets {
        // 一个代表一个源码集
        main {
            // 编译后放到 output 目录的文件
            java {
                // 该方法会覆盖默认的源码路径
                srcDirs = ['src/main/java']       
                
                // 该方法会在原有的路径上追加额外的源码路径
                srcDir 'src/main/java'  
                
                // 排除 main/java 目录下，包名为 some.unwanted.package 下的所有类
                exclude 'some/unwanted/package/**'  
            }
             
            // 直接复制到 output 目录的文件， java 插件默认路径为 [${project.projectDir}/src/${sourceSet.name}/resources]
            resources { 
            }
        }

        test {
            java {
                srcDirs = ['test']
            }
        }
    }
    
    
    
    /** TODO 配置 .java 文件的编译参数 */
    tasks.withType(JavaCompile) {   // 类型为 JavaCompile 的任务的 options 参数配置
        options.encoding = "UTF-8"   // 配置 .java 文件的编码格式为 UTF-8
    }
    
    compileJava {       // 编译参数配置
        options.incremental = true
        options.fork = true
        options.failOnError = false
    }
    
    compileTestJava {   // 测试编译参数配置
    }
    
    
    
    
    /** TODO 单元测试配置 ********************************************************************/
    test {

        testLogging {
            // shell> gradle --debug test --tests kasei.spring.SpringTests.testMethod | grep 'TestEventLogger'
            events 'STARTED', 'PASSED', 'SKIPPED', 'FAILED', 'STANDARD_OUT', 'STANDARD_ERROR'
        }

        useJUnitPlatform {
            systemProperties = [
                    'junit.platform.output.capture.stdout': 'true',
                    'junit.platform.output.capture.stderr': 'true'
            ]
        }
    }

    /** TODO idea 插件引入的 DSL ********************************************************************/
    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

}
